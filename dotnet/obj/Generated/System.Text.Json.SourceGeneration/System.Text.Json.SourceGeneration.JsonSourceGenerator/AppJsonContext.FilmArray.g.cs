// <auto-generated/>

#nullable enable annotations
#nullable disable warnings

// Suppress warnings about [Obsolete] member usage in generated code.
#pragma warning disable CS0612, CS0618

internal partial class AppJsonContext
{
    private global::System.Text.Json.Serialization.Metadata.JsonTypeInfo<global::Film[]>? _FilmArray;
    
    /// <summary>
    /// Defines the source generated JSON serialization contract metadata for a given type.
    /// </summary>
    #nullable disable annotations // Marking the property type as nullable-oblivious.
    public global::System.Text.Json.Serialization.Metadata.JsonTypeInfo<global::Film[]> FilmArray
    #nullable enable annotations
    {
        get => _FilmArray ??= (global::System.Text.Json.Serialization.Metadata.JsonTypeInfo<global::Film[]>)Options.GetTypeInfo(typeof(global::Film[]));
    }
    
    private global::System.Text.Json.Serialization.Metadata.JsonTypeInfo<global::Film[]> Create_FilmArray(global::System.Text.Json.JsonSerializerOptions options)
    {
        if (!TryGetTypeInfoForRuntimeCustomConverter<global::Film[]>(options, out global::System.Text.Json.Serialization.Metadata.JsonTypeInfo<global::Film[]> jsonTypeInfo))
        {
            var info = new global::System.Text.Json.Serialization.Metadata.JsonCollectionInfoValues<global::Film[]>
            {
                ObjectCreator = null,
                SerializeHandler = FilmArraySerializeHandler
            };
            
            jsonTypeInfo = global::System.Text.Json.Serialization.Metadata.JsonMetadataServices.CreateArrayInfo<global::Film>(options, info);
            jsonTypeInfo.NumberHandling = null;
        }
    
        jsonTypeInfo.OriginatingResolver = this;
        return jsonTypeInfo;
    }

    // Intentionally not a static method because we create a delegate to it. Invoking delegates to instance
    // methods is almost as fast as virtual calls. Static methods need to go through a shuffle thunk.
    private void FilmArraySerializeHandler(global::System.Text.Json.Utf8JsonWriter writer, global::Film[]? value)
    {
        if (value is null)
        {
            writer.WriteNullValue();
            return;
        }
        
        writer.WriteStartArray();

        for (int i = 0; i < value.Length; i++)
        {
            FilmSerializeHandler(writer, value[i]);
        }

        writer.WriteEndArray();
    }
}
