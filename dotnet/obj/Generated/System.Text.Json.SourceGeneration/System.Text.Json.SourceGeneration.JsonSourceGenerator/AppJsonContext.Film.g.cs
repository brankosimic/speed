// <auto-generated/>

#nullable enable annotations
#nullable disable warnings

// Suppress warnings about [Obsolete] member usage in generated code.
#pragma warning disable CS0612, CS0618

internal partial class AppJsonContext
{
    private global::System.Text.Json.Serialization.Metadata.JsonTypeInfo<global::Film>? _Film;
    
    /// <summary>
    /// Defines the source generated JSON serialization contract metadata for a given type.
    /// </summary>
    #nullable disable annotations // Marking the property type as nullable-oblivious.
    public global::System.Text.Json.Serialization.Metadata.JsonTypeInfo<global::Film> Film
    #nullable enable annotations
    {
        get => _Film ??= (global::System.Text.Json.Serialization.Metadata.JsonTypeInfo<global::Film>)Options.GetTypeInfo(typeof(global::Film));
    }
    
    private global::System.Text.Json.Serialization.Metadata.JsonTypeInfo<global::Film> Create_Film(global::System.Text.Json.JsonSerializerOptions options)
    {
        if (!TryGetTypeInfoForRuntimeCustomConverter<global::Film>(options, out global::System.Text.Json.Serialization.Metadata.JsonTypeInfo<global::Film> jsonTypeInfo))
        {
            var objectInfo = new global::System.Text.Json.Serialization.Metadata.JsonObjectInfoValues<global::Film>
            {
                ObjectCreator = () => new global::Film(),
                ObjectWithParameterizedConstructorCreator = null,
                PropertyMetadataInitializer = _ => FilmPropInit(options),
                ConstructorParameterMetadataInitializer = null,
                ConstructorAttributeProviderFactory = static () => typeof(global::Film).GetConstructor(InstanceMemberBindingFlags, binder: null, global::System.Array.Empty<global::System.Type>(), modifiers: null),
                SerializeHandler = FilmSerializeHandler,
            };
            
            jsonTypeInfo = global::System.Text.Json.Serialization.Metadata.JsonMetadataServices.CreateObjectInfo<global::Film>(options, objectInfo);
            jsonTypeInfo.NumberHandling = null;
        }
    
        jsonTypeInfo.OriginatingResolver = this;
        return jsonTypeInfo;
    }

    private static global::System.Text.Json.Serialization.Metadata.JsonPropertyInfo[] FilmPropInit(global::System.Text.Json.JsonSerializerOptions options)
    {
        var properties = new global::System.Text.Json.Serialization.Metadata.JsonPropertyInfo[13];

        var info0 = new global::System.Text.Json.Serialization.Metadata.JsonPropertyInfoValues<int>
        {
            IsProperty = true,
            IsPublic = true,
            IsVirtual = false,
            DeclaringType = typeof(global::Film),
            Converter = null,
            Getter = static obj => ((global::Film)obj).FilmId,
            Setter = static (obj, value) => ((global::Film)obj).FilmId = value!,
            IgnoreCondition = null,
            HasJsonInclude = false,
            IsExtensionData = false,
            NumberHandling = null,
            PropertyName = "FilmId",
            JsonPropertyName = null,
            AttributeProviderFactory = static () => typeof(global::Film).GetProperty("FilmId", InstanceMemberBindingFlags, null, typeof(int), global::System.Array.Empty<global::System.Type>(), null),
        };
        
        properties[0] = global::System.Text.Json.Serialization.Metadata.JsonMetadataServices.CreatePropertyInfo<int>(options, info0);

        var info1 = new global::System.Text.Json.Serialization.Metadata.JsonPropertyInfoValues<string>
        {
            IsProperty = true,
            IsPublic = true,
            IsVirtual = false,
            DeclaringType = typeof(global::Film),
            Converter = null,
            Getter = static obj => ((global::Film)obj).Title,
            Setter = static (obj, value) => ((global::Film)obj).Title = value!,
            IgnoreCondition = null,
            HasJsonInclude = false,
            IsExtensionData = false,
            NumberHandling = null,
            PropertyName = "Title",
            JsonPropertyName = null,
            AttributeProviderFactory = static () => typeof(global::Film).GetProperty("Title", InstanceMemberBindingFlags, null, typeof(string), global::System.Array.Empty<global::System.Type>(), null),
        };
        
        properties[1] = global::System.Text.Json.Serialization.Metadata.JsonMetadataServices.CreatePropertyInfo<string>(options, info1);
        properties[1].IsGetNullable = false;
        properties[1].IsSetNullable = false;

        var info2 = new global::System.Text.Json.Serialization.Metadata.JsonPropertyInfoValues<string>
        {
            IsProperty = true,
            IsPublic = true,
            IsVirtual = false,
            DeclaringType = typeof(global::Film),
            Converter = null,
            Getter = static obj => ((global::Film)obj).Description,
            Setter = static (obj, value) => ((global::Film)obj).Description = value!,
            IgnoreCondition = null,
            HasJsonInclude = false,
            IsExtensionData = false,
            NumberHandling = null,
            PropertyName = "Description",
            JsonPropertyName = null,
            AttributeProviderFactory = static () => typeof(global::Film).GetProperty("Description", InstanceMemberBindingFlags, null, typeof(string), global::System.Array.Empty<global::System.Type>(), null),
        };
        
        properties[2] = global::System.Text.Json.Serialization.Metadata.JsonMetadataServices.CreatePropertyInfo<string>(options, info2);
        properties[2].IsGetNullable = false;
        properties[2].IsSetNullable = false;

        var info3 = new global::System.Text.Json.Serialization.Metadata.JsonPropertyInfoValues<int>
        {
            IsProperty = true,
            IsPublic = true,
            IsVirtual = false,
            DeclaringType = typeof(global::Film),
            Converter = null,
            Getter = static obj => ((global::Film)obj).ReleaseYear,
            Setter = static (obj, value) => ((global::Film)obj).ReleaseYear = value!,
            IgnoreCondition = null,
            HasJsonInclude = false,
            IsExtensionData = false,
            NumberHandling = null,
            PropertyName = "ReleaseYear",
            JsonPropertyName = null,
            AttributeProviderFactory = static () => typeof(global::Film).GetProperty("ReleaseYear", InstanceMemberBindingFlags, null, typeof(int), global::System.Array.Empty<global::System.Type>(), null),
        };
        
        properties[3] = global::System.Text.Json.Serialization.Metadata.JsonMetadataServices.CreatePropertyInfo<int>(options, info3);

        var info4 = new global::System.Text.Json.Serialization.Metadata.JsonPropertyInfoValues<int>
        {
            IsProperty = true,
            IsPublic = true,
            IsVirtual = false,
            DeclaringType = typeof(global::Film),
            Converter = null,
            Getter = static obj => ((global::Film)obj).LanguageId,
            Setter = static (obj, value) => ((global::Film)obj).LanguageId = value!,
            IgnoreCondition = null,
            HasJsonInclude = false,
            IsExtensionData = false,
            NumberHandling = null,
            PropertyName = "LanguageId",
            JsonPropertyName = null,
            AttributeProviderFactory = static () => typeof(global::Film).GetProperty("LanguageId", InstanceMemberBindingFlags, null, typeof(int), global::System.Array.Empty<global::System.Type>(), null),
        };
        
        properties[4] = global::System.Text.Json.Serialization.Metadata.JsonMetadataServices.CreatePropertyInfo<int>(options, info4);

        var info5 = new global::System.Text.Json.Serialization.Metadata.JsonPropertyInfoValues<int?>
        {
            IsProperty = true,
            IsPublic = true,
            IsVirtual = false,
            DeclaringType = typeof(global::Film),
            Converter = null,
            Getter = static obj => ((global::Film)obj).OriginalLanguageId,
            Setter = static (obj, value) => ((global::Film)obj).OriginalLanguageId = value!,
            IgnoreCondition = null,
            HasJsonInclude = false,
            IsExtensionData = false,
            NumberHandling = null,
            PropertyName = "OriginalLanguageId",
            JsonPropertyName = null,
            AttributeProviderFactory = static () => typeof(global::Film).GetProperty("OriginalLanguageId", InstanceMemberBindingFlags, null, typeof(int?), global::System.Array.Empty<global::System.Type>(), null),
        };
        
        properties[5] = global::System.Text.Json.Serialization.Metadata.JsonMetadataServices.CreatePropertyInfo<int?>(options, info5);

        var info6 = new global::System.Text.Json.Serialization.Metadata.JsonPropertyInfoValues<int>
        {
            IsProperty = true,
            IsPublic = true,
            IsVirtual = false,
            DeclaringType = typeof(global::Film),
            Converter = null,
            Getter = static obj => ((global::Film)obj).RentalDuration,
            Setter = static (obj, value) => ((global::Film)obj).RentalDuration = value!,
            IgnoreCondition = null,
            HasJsonInclude = false,
            IsExtensionData = false,
            NumberHandling = null,
            PropertyName = "RentalDuration",
            JsonPropertyName = null,
            AttributeProviderFactory = static () => typeof(global::Film).GetProperty("RentalDuration", InstanceMemberBindingFlags, null, typeof(int), global::System.Array.Empty<global::System.Type>(), null),
        };
        
        properties[6] = global::System.Text.Json.Serialization.Metadata.JsonMetadataServices.CreatePropertyInfo<int>(options, info6);

        var info7 = new global::System.Text.Json.Serialization.Metadata.JsonPropertyInfoValues<decimal>
        {
            IsProperty = true,
            IsPublic = true,
            IsVirtual = false,
            DeclaringType = typeof(global::Film),
            Converter = null,
            Getter = static obj => ((global::Film)obj).RentalRate,
            Setter = static (obj, value) => ((global::Film)obj).RentalRate = value!,
            IgnoreCondition = null,
            HasJsonInclude = false,
            IsExtensionData = false,
            NumberHandling = null,
            PropertyName = "RentalRate",
            JsonPropertyName = null,
            AttributeProviderFactory = static () => typeof(global::Film).GetProperty("RentalRate", InstanceMemberBindingFlags, null, typeof(decimal), global::System.Array.Empty<global::System.Type>(), null),
        };
        
        properties[7] = global::System.Text.Json.Serialization.Metadata.JsonMetadataServices.CreatePropertyInfo<decimal>(options, info7);

        var info8 = new global::System.Text.Json.Serialization.Metadata.JsonPropertyInfoValues<int>
        {
            IsProperty = true,
            IsPublic = true,
            IsVirtual = false,
            DeclaringType = typeof(global::Film),
            Converter = null,
            Getter = static obj => ((global::Film)obj).Length,
            Setter = static (obj, value) => ((global::Film)obj).Length = value!,
            IgnoreCondition = null,
            HasJsonInclude = false,
            IsExtensionData = false,
            NumberHandling = null,
            PropertyName = "Length",
            JsonPropertyName = null,
            AttributeProviderFactory = static () => typeof(global::Film).GetProperty("Length", InstanceMemberBindingFlags, null, typeof(int), global::System.Array.Empty<global::System.Type>(), null),
        };
        
        properties[8] = global::System.Text.Json.Serialization.Metadata.JsonMetadataServices.CreatePropertyInfo<int>(options, info8);

        var info9 = new global::System.Text.Json.Serialization.Metadata.JsonPropertyInfoValues<decimal>
        {
            IsProperty = true,
            IsPublic = true,
            IsVirtual = false,
            DeclaringType = typeof(global::Film),
            Converter = null,
            Getter = static obj => ((global::Film)obj).ReplacementCost,
            Setter = static (obj, value) => ((global::Film)obj).ReplacementCost = value!,
            IgnoreCondition = null,
            HasJsonInclude = false,
            IsExtensionData = false,
            NumberHandling = null,
            PropertyName = "ReplacementCost",
            JsonPropertyName = null,
            AttributeProviderFactory = static () => typeof(global::Film).GetProperty("ReplacementCost", InstanceMemberBindingFlags, null, typeof(decimal), global::System.Array.Empty<global::System.Type>(), null),
        };
        
        properties[9] = global::System.Text.Json.Serialization.Metadata.JsonMetadataServices.CreatePropertyInfo<decimal>(options, info9);

        var info10 = new global::System.Text.Json.Serialization.Metadata.JsonPropertyInfoValues<string>
        {
            IsProperty = true,
            IsPublic = true,
            IsVirtual = false,
            DeclaringType = typeof(global::Film),
            Converter = null,
            Getter = static obj => ((global::Film)obj).Rating,
            Setter = static (obj, value) => ((global::Film)obj).Rating = value!,
            IgnoreCondition = null,
            HasJsonInclude = false,
            IsExtensionData = false,
            NumberHandling = null,
            PropertyName = "Rating",
            JsonPropertyName = null,
            AttributeProviderFactory = static () => typeof(global::Film).GetProperty("Rating", InstanceMemberBindingFlags, null, typeof(string), global::System.Array.Empty<global::System.Type>(), null),
        };
        
        properties[10] = global::System.Text.Json.Serialization.Metadata.JsonMetadataServices.CreatePropertyInfo<string>(options, info10);
        properties[10].IsGetNullable = false;
        properties[10].IsSetNullable = false;

        var info11 = new global::System.Text.Json.Serialization.Metadata.JsonPropertyInfoValues<global::System.DateTime>
        {
            IsProperty = true,
            IsPublic = true,
            IsVirtual = false,
            DeclaringType = typeof(global::Film),
            Converter = null,
            Getter = static obj => ((global::Film)obj).LastUpdate,
            Setter = static (obj, value) => ((global::Film)obj).LastUpdate = value!,
            IgnoreCondition = null,
            HasJsonInclude = false,
            IsExtensionData = false,
            NumberHandling = null,
            PropertyName = "LastUpdate",
            JsonPropertyName = null,
            AttributeProviderFactory = static () => typeof(global::Film).GetProperty("LastUpdate", InstanceMemberBindingFlags, null, typeof(global::System.DateTime), global::System.Array.Empty<global::System.Type>(), null),
        };
        
        properties[11] = global::System.Text.Json.Serialization.Metadata.JsonMetadataServices.CreatePropertyInfo<global::System.DateTime>(options, info11);

        var info12 = new global::System.Text.Json.Serialization.Metadata.JsonPropertyInfoValues<string[]>
        {
            IsProperty = true,
            IsPublic = true,
            IsVirtual = false,
            DeclaringType = typeof(global::Film),
            Converter = null,
            Getter = static obj => ((global::Film)obj).SpecialFeatures,
            Setter = static (obj, value) => ((global::Film)obj).SpecialFeatures = value!,
            IgnoreCondition = null,
            HasJsonInclude = false,
            IsExtensionData = false,
            NumberHandling = null,
            PropertyName = "SpecialFeatures",
            JsonPropertyName = null,
            AttributeProviderFactory = static () => typeof(global::Film).GetProperty("SpecialFeatures", InstanceMemberBindingFlags, null, typeof(string[]), global::System.Array.Empty<global::System.Type>(), null),
        };
        
        properties[12] = global::System.Text.Json.Serialization.Metadata.JsonMetadataServices.CreatePropertyInfo<string[]>(options, info12);
        properties[12].IsGetNullable = false;
        properties[12].IsSetNullable = false;

        return properties;
    }

    // Intentionally not a static method because we create a delegate to it. Invoking delegates to instance
    // methods is almost as fast as virtual calls. Static methods need to go through a shuffle thunk.
    private void FilmSerializeHandler(global::System.Text.Json.Utf8JsonWriter writer, global::Film? value)
    {
        if (value is null)
        {
            writer.WriteNullValue();
            return;
        }
        
        writer.WriteStartObject();

        writer.WriteNumber(PropName_FilmId, ((global::Film)value).FilmId);
        writer.WriteString(PropName_Title, ((global::Film)value).Title);
        writer.WriteString(PropName_Description, ((global::Film)value).Description);
        writer.WriteNumber(PropName_ReleaseYear, ((global::Film)value).ReleaseYear);
        writer.WriteNumber(PropName_LanguageId, ((global::Film)value).LanguageId);
        writer.WritePropertyName(PropName_OriginalLanguageId);
        global::System.Text.Json.JsonSerializer.Serialize(writer, ((global::Film)value).OriginalLanguageId, NullableInt32);
        writer.WriteNumber(PropName_RentalDuration, ((global::Film)value).RentalDuration);
        writer.WriteNumber(PropName_RentalRate, ((global::Film)value).RentalRate);
        writer.WriteNumber(PropName_Length, ((global::Film)value).Length);
        writer.WriteNumber(PropName_ReplacementCost, ((global::Film)value).ReplacementCost);
        writer.WriteString(PropName_Rating, ((global::Film)value).Rating);
        writer.WriteString(PropName_LastUpdate, ((global::Film)value).LastUpdate);
        writer.WritePropertyName(PropName_SpecialFeatures);
        StringArraySerializeHandler(writer, ((global::Film)value).SpecialFeatures);

        writer.WriteEndObject();
    }
}
